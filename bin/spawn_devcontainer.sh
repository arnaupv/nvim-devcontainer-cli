#!/bin/sh
set -ex

help() {
	echo "Usage: $0 [OPTIONS]"
	echo "Options:"
	echo "  -r, --remove-existing-container"
	echo "  Description: Remove existing devcontainer before creating a new one."
	echo "  -e, --env [pro|dev]"
	echo "  Description: Environment to setup. If 'dev' is specified, the plugin folder is mounted in the container (only needed when developing the plugin)"
	echo "  Default: pro"
	echo "  -d, --root_directory"
	echo "  Description: root_dir where the .devcontainer folder is located"
	echo "  -s, --setup-environment-repo"
	echo "  Description: Repository with the instructions needed for installing the dependencies in the devcontainer."
	echo "  -i, --setup-environment-install-command"
	echo "  Description: Command to install the setup environment."
	echo "  -D, --nvim-dotfiles-repo"
	echo "  Description: Repository with the nvim dotfiles."
	echo "  -I, --nvim-dotfiles-install-command"
	echo "  Description: Command to install the nvim dotfiles."
	echo "  -h, --help"
	echo "  Description: Show help."
	echo ""
	echo "Example:"
	echo "  $0 -r -e dev -s https://www.github.com/username/setup-environment -i './install.sh -p nvim zsh stow' -D https://github.com/LazyVim/starter -I 'mv ~/dotfiles ~/.config/nvim'"
	echo ""
}

# Default values
remove_existing_container=""
env="pro"

# Handle command-line arguments
while [ $# -gt 0 ]; do
	case $1 in
	-r | --remove-existing-container)
		remove_existing_container="--remove-existing-container"
		shift
		;;
	-e | --env)
		if [ "$2" = "dev" ]; then
			env="dev"
		elif [ "$2" = "pro" ]; then
			env="pro"
		else
			echo "Invalid env. Please specify either 'dev' or 'pro' for -e."
			exit 1
		fi
		shift 2
		;;
	-d | --root_directory)
		root_dir=$2
		shift 2
		;;
	-s | --setup-environment-repo)
		setup_environment_repo=$2
		shift 2
		;;
	-i | --setup-environment-install-command)
		setup_environment_install_command=$2
		shift 2
		;;
	-D | --nvim-dotfiles-repo)
		nvim_dotfiles_repo=$2
		shift 2
		;;
	-I | --nvim-dotfiles-install-command)
		nvim_dotfiles_install_command=$2
		shift 2
		;;
	-h | --help)
		help
		exit 0
		;;
	*)
		echo "Invalid option: $1"
		exit 1
		;;
	esac
done
workspace=${root_dir}
cd "${workspace}"

NVIM_DEVCONTAINER_CLI_FOLDER=$(echo "${HOME}"/.local/share/nvim/lazy/nvim-devcontainer-cli/ | sed "s|^$HOME||")
HOME_IN_DOCKER_CONTAINER="/root/"
NVIM_DEVCONTAINER_CLI_FOLDER_IN_DOCKER_CONTAINER=${HOME_IN_DOCKER_CONTAINER}"${NVIM_DEVCONTAINER_CLI_FOLDER}"

# Check if file .config/github-copilot exists
if [ ! -d "${HOME}"/.config/github-copilot ]; then
	echo "File ${HOME}/.config/github-copilot does not exist"
else
	MOUNT_BIND_COPILOT="--mount type=bind,source=${HOME}/.config/github-copilot,target=${HOME_IN_DOCKER_CONTAINER}/.config/github-copilot"
fi

# Check if file .gitconfig exists
if [ ! -f "${HOME}"/.gitconfig ]; then
	echo "File ${HOME}/.gitconfig does not exist"
else
	MOUNT_BIND_GITCONFIG="--mount type=bind,source=${HOME}/.gitconfig,target=${HOME_IN_DOCKER_CONTAINER}/.gitconfig"
fi

# MOUNT_BIND_NVIM_PLUGINS="--mount type=bind,source=${HOME}/.local/share/nvim,target=${HOME_IN_DOCKER_CONTAINER}/.local/share/nvim"
# Mount the plugin folder only if --env is set to dev:
if [ "$env" = "dev" ]; then
	MOUNT_BIND_PLUGIN="--mount type=bind,source=${HOME}/${NVIM_DEVCONTAINER_CLI_FOLDER},target=${NVIM_DEVCONTAINER_CLI_FOLDER_IN_DOCKER_CONTAINER}"
fi

# MOUNT_BIND_NVIM_PLUGINS helps so you do not have to install again and again all the nvim plugings inside the container
# however it can also bring to some incompatibilities as not all the devcontainer might need the same plugins.
# ${MOUNT_BIND_NVIM_PLUGINS} \

devcontainer up ${remove_existing_container} \
	${MOUNT_BIND_COPILOT} \
	${MOUNT_BIND_GITCONFIG} \
	${MOUNT_BIND_PLUGIN} \
	--dotfiles-repository "${setup_environment_repo}" \
	--workspace-folder "${workspace}" \
	--update-remote-user-uid-default off

# Only the clonation is needed, the installation does nothing. This is done in the next commands (with ROOT user)
# --dotfiles-install-command "${nvim_dotfiles_install}" \

# Setting Up Devcontainer
# REMOTE_USER=$(devcontainer read-configuration --include-merged-configuration --workspace-folder . | jq '.configuration.remoteUser' | tr -d '"')
# WORKSPACE_FOLDER=$(devcontainer read-configuration --include-merged-configuration --workspace-folder . | jq '.workspace.workspaceFolder' | tr -d '"')
# # Installing dependencies as root (nvim package)
# DEVCONTAINER_ROOT_CONFIG=.devcontainer/autogenerated-devcontainer-root.json
# 
# # Installing dependencies as root (nvim package)
# DEVCONTAINER_ROOT_CONFIG=.devcontainer/autogenerated-devcontainer-root.json
# jq -n --arg workspaceFolder "$WORKSPACE_FOLDER" '{ "remoteUser": "root", "workspaceFolder": $workspaceFolder, "remoteEnv": { "HOME": "" }}' >${DEVCONTAINER_ROOT_CONFIG}
# # jq -n '{ "remoteUser": "root", "remoteEnv": { "HOME": "" }}' >${DEVCONTAINER_ROOT_CONFIG}
# # devcontainer up --dotfiles-repository clones the dotfiles by default in this path /home/${REMOTE_USER}/dotfiles
# devcontainer exec --override-config ${DEVCONTAINER_ROOT_CONFIG} --workspace-folder "${workspace}" sh -c "cd /home/${REMOTE_USER}/dotfiles/ && ${setup_environment_install_command}"
# rm "${DEVCONTAINER_ROOT_CONFIG}"
# 
# # Configuring NVIM dotfiles
# devcontainer exec --workspace-folder "${workspace}" sh -c "git clone '${nvim_dotfiles_repo}' /home/${REMOTE_USER}/nvim_dotfiles/ && ${nvim_dotfiles_install_command}"
